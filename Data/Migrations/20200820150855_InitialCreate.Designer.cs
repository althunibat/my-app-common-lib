// <auto-generated />

using System;
using Godwit.Common.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Godwit.Common.Data.Migrations
{
    [DbContext(typeof(KetoDbContext))]
    [Migration("20200820150855_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:activity_level", "sedentary,lightly_active,moderately_active,very_active")
                .HasAnnotation("Npgsql:Enum:deficit_goal", "lose_weight,maintain,gain_muscle")
                .HasAnnotation("Npgsql:Enum:gender", "male,female")
                .HasAnnotation("Npgsql:Enum:measurement_unit", "g,tbsp,tsp,cup,ml")
                .HasAnnotation("Npgsql:PostgresExtension:citext", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.EntityFrameworkHiLoSequence", "'EntityFrameworkHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Godwit.Common.Data.Model.DailyLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Instant>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp");

                    b.Property<long>("TargetId")
                        .HasColumnName("target_id")
                        .HasColumnType("bigint");

                    b.Property<short>("TotalCalories")
                        .HasColumnName("total_calories")
                        .HasColumnType("smallint");

                    b.Property<short>("TotalCarbs")
                        .HasColumnName("total_carbs")
                        .HasColumnType("smallint");

                    b.Property<short>("TotalFat")
                        .HasColumnName("total_fat")
                        .HasColumnType("smallint");

                    b.Property<short>("TotalProtein")
                        .HasColumnName("total_protein")
                        .HasColumnType("smallint");

                    b.Property<Instant?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("timestamp");

                    b.Property<long?>("UserIntakeTargetId")
                        .HasColumnName("user_intake_target_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_daily_log");

                    b.HasIndex("UserIntakeTargetId")
                        .HasName("ix_daily_log_user_intake_target_id");

                    b.ToTable("daily_log");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<float>("CaloriesPerServing")
                        .HasColumnName("calories_per_serving")
                        .HasColumnType("real");

                    b.Property<float>("CarbsPerServing")
                        .HasColumnName("carbs_per_serving")
                        .HasColumnType("real");

                    b.Property<Instant>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp");

                    b.Property<float>("FatPerServing")
                        .HasColumnName("fat_per_serving")
                        .HasColumnType("real");

                    b.Property<MeasurementUnit>("MeasurementUnit")
                        .HasColumnName("measurement_unit")
                        .HasColumnType("measurement_unit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(256);

                    b.Property<float>("ProteinPerServing")
                        .HasColumnName("protein_per_serving")
                        .HasColumnType("real");

                    b.Property<float>("ServingValue")
                        .HasColumnName("serving_value")
                        .HasColumnType("real");

                    b.Property<Instant?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_ingredient");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_ingredient_name");

                    b.ToTable("ingredient");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.Intake", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<float>("Calories")
                        .HasColumnName("calories")
                        .HasColumnType("real");

                    b.Property<float>("Carbs")
                        .HasColumnName("carbs")
                        .HasColumnType("real");

                    b.Property<Instant>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp");

                    b.Property<float>("Fat")
                        .HasColumnName("fat")
                        .HasColumnType("real");

                    b.Property<long>("IngredientId")
                        .HasColumnName("ingredient_id")
                        .HasColumnType("bigint");

                    b.Property<MeasurementUnit>("MeasurementUnit")
                        .HasColumnName("measurement_unit")
                        .HasColumnType("measurement_unit");

                    b.Property<float>("Protein")
                        .HasColumnName("protein")
                        .HasColumnType("real");

                    b.Property<float>("SizeTaken")
                        .HasColumnName("size_taken")
                        .HasColumnType("real");

                    b.Property<long>("TargetId")
                        .HasColumnName("target_id")
                        .HasColumnType("bigint");

                    b.Property<Instant>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp");

                    b.Property<Instant?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_intake");

                    b.HasIndex("IngredientId")
                        .HasName("ix_intake_ingredient_id");

                    b.HasIndex("TargetId")
                        .HasName("ix_intake_target_id");

                    b.ToTable("intake");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Instant>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<Instant?>("ReadOn")
                        .HasColumnName("read_on")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("UserId")
                        .HasName("ix_notification_user_id");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Gender>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("ix_users_normalized_email");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("ix_users_normalized_user_name");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.UserIntakeTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<ActivityLevel>("ActivityLevel")
                        .HasColumnName("activity_level")
                        .HasColumnType("activity_level");

                    b.Property<Instant>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp");

                    b.Property<float>("DeficitPercentage")
                        .HasColumnName("deficit_percentage")
                        .HasColumnType("real");

                    b.Property<float>("FatPercentage")
                        .HasColumnName("fat_percentage")
                        .HasColumnType("real");

                    b.Property<DeficitGoal>("Goal")
                        .HasColumnName("goal")
                        .HasColumnType("deficit_goal");

                    b.Property<float>("Height")
                        .HasColumnName("height")
                        .HasColumnType("real");

                    b.Property<float>("NetCarbsPercentage")
                        .HasColumnName("net_carbs_percentage")
                        .HasColumnType("real");

                    b.Property<float>("ProteinTaken")
                        .HasColumnName("protein_taken")
                        .HasColumnType("real");

                    b.Property<float?>("TotalCaloriesIntake")
                        .HasColumnName("total_calories_intake")
                        .HasColumnType("real");

                    b.Property<float?>("TotalCarbsIntake")
                        .HasColumnName("total_carbs_intake")
                        .HasColumnType("real");

                    b.Property<float?>("TotalFatIntake")
                        .HasColumnName("total_fat_intake")
                        .HasColumnType("real");

                    b.Property<float?>("TotalProteinIntake")
                        .HasColumnName("total_protein_intake")
                        .HasColumnType("real");

                    b.Property<Instant?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_user_intake_target");

                    b.HasIndex("UserId")
                        .HasName("ix_user_intake_target_user_id");

                    b.ToTable("user_intake_target");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("ix_roles_normalized_name");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_user_logins_user_id");

                    b.ToTable("user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.DailyLog", b =>
                {
                    b.HasOne("Godwit.Common.Data.Model.UserIntakeTarget", "UserIntakeTarget")
                        .WithMany("DailyLogs")
                        .HasForeignKey("UserIntakeTargetId")
                        .HasConstraintName("fk_daily_log_user_intake_target_user_intake_target_id");
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.Intake", b =>
                {
                    b.HasOne("Godwit.Common.Data.Model.Ingredient", "Ingredient")
                        .WithMany("Intakes")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("fk_intake_ingredient_ingredient_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Godwit.Common.Data.Model.UserIntakeTarget", "UserIntakeTarget")
                        .WithMany("Intakes")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("fk_intake_user_intake_target_user_intake_target_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.Notification", b =>
                {
                    b.HasOne("Godwit.Common.Data.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_notification_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Godwit.Common.Data.Model.UserIntakeTarget", b =>
                {
                    b.HasOne("Godwit.Common.Data.Model.User", "User")
                        .WithMany("Targets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_intake_target_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_identity_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Godwit.Common.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Godwit.Common.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_identity_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Godwit.Common.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
